/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package voting;

import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luqmaan
 */
public class Candidates extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Candidates() {
        initComponents();
        jLabel1.setIcon(Voting.vsmall);

        try {

            DefaultTableModel model1 = (DefaultTableModel) headBoy.getModel();
            DefaultTableModel model2 = (DefaultTableModel) headGirl.getModel();
            DefaultTableModel model3 = (DefaultTableModel) cultural.getModel();
            DefaultTableModel model4 = (DefaultTableModel) sports.getModel();

            Class.forName("java.sql.Driver");
            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
            Statement stmt = con.createStatement();
            ResultSet rs;

            String query;

            query = "select *from headboy order by (name);";

            rs = stmt.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString(1);

                model1.addRow(new Object[]{name});
            }

            query = "select *from headgirl order by (name);";

            rs = stmt.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString(1);

                model2.addRow(new Object[]{name});
            }

            query = "select *from cultural order by (name);";

            rs = stmt.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString(1);

                model3.addRow(new Object[]{name});
            }

            query = "select *from sports order by (name);";

            rs = stmt.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString(1);

                model4.addRow(new Object[]{name});
            }

            rs.close();
            stmt.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    File file = new File("").getAbsoluteFile();
    File database = new File(file + "\\Database");
    File databaseFile = new File(database + "\\furqaan.db");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        boy = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        headBoy = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        girl = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        cul = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        spo = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        sports = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        cultural = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        headGirl = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jComboBox1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(102, 0, 51));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TASK", "ADD", "DELETE", " " }));
        jComboBox1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 51)));
        jPanel1.add(jComboBox1);
        jComboBox1.setBounds(20, 550, 80, 30);

        boy.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 12)); // NOI18N
        boy.setForeground(new java.awt.Color(69, 68, 68));
        boy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        boy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boyMouseClicked(evt);
            }
        });
        boy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                boyKeyReleased(evt);
            }
        });
        jPanel1.add(boy);
        boy.setBounds(110, 550, 110, 30);

        headBoy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        headBoy.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        headBoy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(headBoy);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(20, 310, 280, 230);

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(153, 0, 51));
        jButton4.setText("EXECUTE");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 0)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(230, 550, 70, 30);

        jComboBox2.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(102, 0, 51));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TASK", "ADD", "DELETE", " " }));
        jComboBox2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 51)));
        jPanel1.add(jComboBox2);
        jComboBox2.setBounds(310, 550, 80, 30);

        girl.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 12)); // NOI18N
        girl.setForeground(new java.awt.Color(69, 68, 68));
        girl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        girl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                girlMouseClicked(evt);
            }
        });
        girl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                girlKeyReleased(evt);
            }
        });
        jPanel1.add(girl);
        girl.setBounds(400, 550, 110, 30);

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(153, 0, 51));
        jButton5.setText("EXECUTE");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 0)));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(520, 550, 70, 30);

        jComboBox3.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(102, 0, 51));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TASK", "ADD", "DELETE", " " }));
        jComboBox3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 51)));
        jPanel1.add(jComboBox3);
        jComboBox3.setBounds(600, 550, 80, 30);

        cul.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 12)); // NOI18N
        cul.setForeground(new java.awt.Color(69, 68, 68));
        cul.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        cul.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                culMouseClicked(evt);
            }
        });
        cul.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                culKeyReleased(evt);
            }
        });
        jPanel1.add(cul);
        cul.setBounds(690, 550, 110, 30);

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(153, 0, 51));
        jButton6.setText("EXECUTE");
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 0)));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);
        jButton6.setBounds(810, 550, 70, 30);

        jComboBox4.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jComboBox4.setForeground(new java.awt.Color(102, 0, 51));
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TASK", "ADD", "DELETE", " " }));
        jComboBox4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 51)));
        jPanel1.add(jComboBox4);
        jComboBox4.setBounds(890, 550, 80, 30);

        spo.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 12)); // NOI18N
        spo.setForeground(new java.awt.Color(69, 68, 68));
        spo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        spo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spoMouseClicked(evt);
            }
        });
        spo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spoKeyReleased(evt);
            }
        });
        jPanel1.add(spo);
        spo.setBounds(980, 550, 110, 30);

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(153, 0, 51));
        jButton7.setText("EXECUTE");
        jButton7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 0)));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7);
        jButton7.setBounds(1100, 550, 70, 30);

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("CLEAR ALL");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1010, 610, 160, 40);

        sports.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        sports.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        sports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(sports);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(890, 310, 280, 230);

        cultural.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        cultural.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        cultural.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(cultural);

        jPanel1.add(jScrollPane6);
        jScrollPane6.setBounds(600, 310, 280, 230);

        headGirl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        headGirl.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        headGirl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(headGirl);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(310, 310, 280, 230);

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("HEAD BOY");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(70, 240, 170, 50);

        jLabel9.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("HEAD GIRL");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(360, 240, 170, 50);

        jLabel11.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("CULTURAL CAPTAIN");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(630, 240, 220, 50);

        jLabel10.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("SPORTS CAPTAIN");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(920, 240, 200, 50);

        jLabel6.setFont(new java.awt.Font("Berlin Sans FB", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("CANDIDATES");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(370, 190, 460, 50);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/voting/res/back.png"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel12);
        jLabel12.setBounds(10, 10, 60, 60);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(400, 0, 400, 190);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1216, 714));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void boyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boyMouseClicked
        // TODO add your handling code here:
        boy.selectAll();
    }//GEN-LAST:event_boyMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) headBoy.getModel();

        int a = jComboBox1.getSelectedIndex();
        String name = boy.getText().trim();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
        } else {
            switch (a) {
                case 0:
                    JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                    break;

                case 1:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String add = "insert into headboy values('" + name.toUpperCase().toUpperCase() + "', '0');";

                        stmt.executeUpdate(add);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;

                case 2:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String delete = "delete from headboy where name = '" + name + "';";

                        stmt.executeUpdate(delete);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;
            }

            model1.setRowCount(0);

            try {

                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                Statement stmt = con.createStatement();
                ResultSet rs;

                String query;

                query = "select *from headboy order by (name);";

                rs = stmt.executeQuery(query);

                while (rs.next()) {
                    String names = rs.getString(1);

                    model1.addRow(new Object[]{names});
                }

                rs.close();
                stmt.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void girlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_girlMouseClicked
        // TODO add your handling code here:
        girl.selectAll();
    }//GEN-LAST:event_girlMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model2 = (DefaultTableModel) headGirl.getModel();

        int a = jComboBox2.getSelectedIndex();
        String name = girl.getText().trim();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
        } else {
            switch (a) {
                case 0:
                    JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                    break;

                case 1:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String add = "insert into headgirl values('" + name.toUpperCase().toUpperCase() + "', '0');";

                        stmt.executeUpdate(add);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;

                case 2:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String delete = "delete from headgirl where name = '" + name + "';";

                        stmt.executeUpdate(delete);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;
            }

            model2.setRowCount(0);

            try {

                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                Statement stmt = con.createStatement();
                ResultSet rs;

                String query;

                query = "select *from headgirl order by (name);";

                rs = stmt.executeQuery(query);

                while (rs.next()) {
                    String names = rs.getString(1);

                    model2.addRow(new Object[]{names});
                }

                rs.close();
                stmt.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void culMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_culMouseClicked
        // TODO add your handling code here:
        cul.selectAll();
    }//GEN-LAST:event_culMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model3 = (DefaultTableModel) cultural.getModel();

        int a = jComboBox3.getSelectedIndex();
        String name = cul.getText().trim();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
        } else {
            switch (a) {
                case 0:
                    JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                    break;

                case 1:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String add = "insert into cultural values('" + name.toUpperCase().toUpperCase() + "', '0');";

                        stmt.executeUpdate(add);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;

                case 2:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String delete = "delete from cultural where name = '" + name + "';";

                        stmt.executeUpdate(delete);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;
            }

            model3.setRowCount(0);

            try {

                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                Statement stmt = con.createStatement();
                ResultSet rs;

                String query;

                query = "select *from cultural order by (name);";

                rs = stmt.executeQuery(query);

                while (rs.next()) {
                    String names = rs.getString(1);

                    model3.addRow(new Object[]{names});
                }

                rs.close();
                stmt.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void spoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spoMouseClicked
        // TODO add your handling code here:
        spo.selectAll();
    }//GEN-LAST:event_spoMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model4 = (DefaultTableModel) sports.getModel();

        int a = jComboBox4.getSelectedIndex();
        String name = spo.getText().trim();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
        } else {
            switch (a) {
                case 0:
                    JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                    break;

                case 1:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String add = "insert into sports values('" + name.toUpperCase().toUpperCase() + "', '0');";

                        stmt.executeUpdate(add);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;

                case 2:
                    try {
                        Class.forName("java.sql.Driver");
                        Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                        Statement stmt = con.createStatement();
                        String delete = "delete from sports where name = '" + name + "';";

                        stmt.executeUpdate(delete);

                        stmt.close();
                        con.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                    }
                    break;
            }

            model4.setRowCount(0);

            try {

                Class.forName("java.sql.Driver");
                Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                Statement stmt = con.createStatement();
                ResultSet rs;

                String query;

                query = "select *from sports order by (name);";

                rs = stmt.executeQuery(query);

                while (rs.next()) {
                    String names = rs.getString(1);

                    model4.addRow(new Object[]{names});
                }

                rs.close();
                stmt.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to Clear All Data?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (a == 0) {

            try {
                DefaultTableModel model1 = (DefaultTableModel) headBoy.getModel();
                DefaultTableModel model2 = (DefaultTableModel) headGirl.getModel();
                DefaultTableModel model3 = (DefaultTableModel) cultural.getModel();
                DefaultTableModel model4 = (DefaultTableModel) sports.getModel();

                try {
                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();

                    String query = "Delete from headboy where name is not null";

                    stmt.execute(query);

                    model1.setRowCount(0);

                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Info", WIDTH);
                }

                try {
                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();

                    String query = "Delete from headgirl where name is not null";

                    stmt.execute(query);

                    model2.setRowCount(0);

                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Info", WIDTH);
                }

                try {
                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();

                    String query = "Delete from cultural where name is not null";

                    stmt.execute(query);

                    model3.setRowCount(0);

                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Info", WIDTH);
                }

                try {
                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();

                    String query = "Delete from sports where name is not null";

                    stmt.execute(query);

                    model4.setRowCount(0);

                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Info", WIDTH);
                }

                JOptionPane.showMessageDialog(this, "Data has been Cleared", "Info", WIDTH);
            } catch (Exception w) {
                JOptionPane.showMessageDialog(this, w.getMessage());
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void boyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boyKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            boy.selectAll();

            DefaultTableModel model1 = (DefaultTableModel) headBoy.getModel();

            int a = jComboBox1.getSelectedIndex();
            String name = boy.getText().trim();

            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
            } else {
                switch (a) {
                    case 0:
                        JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                        break;

                    case 1:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String add = "insert into headboy values('" + name.toUpperCase().toUpperCase() + "', '0');";

                            stmt.executeUpdate(add);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;

                    case 2:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String delete = "delete from headboy where name = '" + name + "';";

                            stmt.executeUpdate(delete);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;
                }

                model1.setRowCount(0);

                try {

                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();
                    ResultSet rs;

                    String query;

                    query = "select *from headboy order by (name);";

                    rs = stmt.executeQuery(query);

                    while (rs.next()) {
                        String names = rs.getString(1);

                        model1.addRow(new Object[]{names});
                    }

                    rs.close();
                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_boyKeyReleased

    private void girlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_girlKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            girl.selectAll();

            DefaultTableModel model2 = (DefaultTableModel) headGirl.getModel();

            int a = jComboBox2.getSelectedIndex();
            String name = girl.getText().trim();

            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
            } else {
                switch (a) {
                    case 0:
                        JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                        break;

                    case 1:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String add = "insert into headgirl values('" + name.toUpperCase().toUpperCase() + "', '0');";

                            stmt.executeUpdate(add);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;

                    case 2:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String delete = "delete from headgirl where name = '" + name + "';";

                            stmt.executeUpdate(delete);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;
                }

                model2.setRowCount(0);

                try {

                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();
                    ResultSet rs;

                    String query;

                    query = "select *from headgirl order by (name);";

                    rs = stmt.executeQuery(query);

                    while (rs.next()) {
                        String names = rs.getString(1);

                        model2.addRow(new Object[]{names});
                    }

                    rs.close();
                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_girlKeyReleased

    private void culKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_culKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            cul.selectAll();

            DefaultTableModel model3 = (DefaultTableModel) cultural.getModel();

            int a = jComboBox3.getSelectedIndex();
            String name = cul.getText().trim();

            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
            } else {
                switch (a) {
                    case 0:
                        JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                        break;

                    case 1:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String add = "insert into cultural values('" + name.toUpperCase().toUpperCase() + "', '0');";

                            stmt.executeUpdate(add);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;

                    case 2:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String delete = "delete from cultural where name = '" + name + "';";

                            stmt.executeUpdate(delete);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;
                }

                model3.setRowCount(0);

                try {

                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();
                    ResultSet rs;

                    String query;

                    query = "select *from cultural order by (name);";

                    rs = stmt.executeQuery(query);

                    while (rs.next()) {
                        String names = rs.getString(1);

                        model3.addRow(new Object[]{names});
                    }

                    rs.close();
                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_culKeyReleased

    private void spoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spoKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            spo.selectAll();

            DefaultTableModel model4 = (DefaultTableModel) sports.getModel();

            int a = jComboBox4.getSelectedIndex();
            String name = spo.getText().trim();

            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Type a Name to add to this post");
            } else {
                switch (a) {
                    case 0:
                        JOptionPane.showMessageDialog(this, "Please Select a Task", "Info", WIDTH);
                        break;

                    case 1:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String add = "insert into sports values('" + name.toUpperCase().toUpperCase() + "', '0');";

                            stmt.executeUpdate(add);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;

                    case 2:
                        try {
                            Class.forName("java.sql.Driver");
                            Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                            Statement stmt = con.createStatement();
                            String delete = "delete from sports where name = '" + name + "';";

                            stmt.executeUpdate(delete);

                            stmt.close();
                            con.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "SQL ERROR", WIDTH);
                        }
                        break;
                }

                model4.setRowCount(0);

                try {

                    Class.forName("java.sql.Driver");
                    Connection con = DriverManager.getConnection("jdbc:sqlite:" + databaseFile);
                    Statement stmt = con.createStatement();
                    ResultSet rs;

                    String query;

                    query = "select *from sports order by (name);";

                    rs = stmt.executeQuery(query);

                    while (rs.next()) {
                        String names = rs.getString(1);

                        model4.addRow(new Object[]{names});
                    }

                    rs.close();
                    stmt.close();
                    con.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_spoKeyReleased

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        // TODO add your handling code here:
        Tools tool = new Tools();
        tool.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel12MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Candidates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Candidates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Candidates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Candidates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Candidates().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boy;
    private javax.swing.JTextField cul;
    private javax.swing.JTable cultural;
    private javax.swing.JTextField girl;
    private javax.swing.JTable headBoy;
    private javax.swing.JTable headGirl;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField spo;
    private javax.swing.JTable sports;
    // End of variables declaration//GEN-END:variables
}
